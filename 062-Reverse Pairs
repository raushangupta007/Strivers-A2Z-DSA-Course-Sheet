class Solution {
public:
    int count=0;
    void merge(vector<int>&arr, int p, int q, int r) {
        int n1 = q - p + 1;
        int n2 = r - q;
        int L[n1], M[n2];
        for (int i = 0; i < n1; i++)
            L[i] = arr[p + i];
        for (int j = 0; j < n2; j++)
            M[j] = arr[q + 1 + j];
        int i=0, j=0, k=p,x=0;
        while (i < n1 && j < n2) {
            while(x<n2 && L[i]>(long)2*M[x]) {
                x++;
                count+=n1-i;
            }
            if (L[i] <= M[j])
                arr[k++] = L[i++];
            else
                arr[k++] = M[j++];
        }
        while (i < n1) {
            while(x<n2 && L[i]>(long)2*M[x]) {
                x++;
                count+=n1-i;
            }
            arr[k++] = L[i++];
        }
        while (j < n2) arr[k++] = M[j++];
    }

    void mergeSort(vector<int>& arr, int l, int r) {
        if (l < r) {
            int m =( l + r) / 2;
            mergeSort(arr, l, m);
            mergeSort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }
    int reversePairs(vector<int>& nums) {
        mergeSort(nums, 0, nums.size() - 1);
        return count;
    }
# };
